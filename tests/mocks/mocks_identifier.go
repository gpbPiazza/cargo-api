// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/domain/usecases/tax_id_identifier.go
//
// Generated by this command:
//
//	mockgen -source=./src/domain/usecases/tax_id_identifier.go -destination=./tests/mocks/mocks_identifier.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTaxIDIdentifier is a mock of TaxIDIdentifier interface.
type MockTaxIDIdentifier struct {
	ctrl     *gomock.Controller
	recorder *MockTaxIDIdentifierMockRecorder
}

// MockTaxIDIdentifierMockRecorder is the mock recorder for MockTaxIDIdentifier.
type MockTaxIDIdentifierMockRecorder struct {
	mock *MockTaxIDIdentifier
}

// NewMockTaxIDIdentifier creates a new mock instance.
func NewMockTaxIDIdentifier(ctrl *gomock.Controller) *MockTaxIDIdentifier {
	mock := &MockTaxIDIdentifier{ctrl: ctrl}
	mock.recorder = &MockTaxIDIdentifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaxIDIdentifier) EXPECT() *MockTaxIDIdentifierMockRecorder {
	return m.recorder
}

// IdentifyPersonTaxID mocks base method.
func (m *MockTaxIDIdentifier) IdentifyPersonTaxID(taxID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdentifyPersonTaxID", taxID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IdentifyPersonTaxID indicates an expected call of IdentifyPersonTaxID.
func (mr *MockTaxIDIdentifierMockRecorder) IdentifyPersonTaxID(taxID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdentifyPersonTaxID", reflect.TypeOf((*MockTaxIDIdentifier)(nil).IdentifyPersonTaxID), taxID)
}
