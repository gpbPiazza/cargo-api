// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/domain/usecases/find_customer_by_tax_id.go
//
// Generated by this command:
//
//	mockgen -source=./src/domain/usecases/find_customer_by_tax_id.go -destination=./tests/mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/gpbPiazza/cargo-api/src/domain/models"
	gomock "go.uber.org/mock/gomock"
)

// MockFindCustomerRepository is a mock of FindCustomerRepository interface.
type MockFindCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFindCustomerRepositoryMockRecorder
}

// MockFindCustomerRepositoryMockRecorder is the mock recorder for MockFindCustomerRepository.
type MockFindCustomerRepositoryMockRecorder struct {
	mock *MockFindCustomerRepository
}

// NewMockFindCustomerRepository creates a new mock instance.
func NewMockFindCustomerRepository(ctrl *gomock.Controller) *MockFindCustomerRepository {
	mock := &MockFindCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockFindCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFindCustomerRepository) EXPECT() *MockFindCustomerRepositoryMockRecorder {
	return m.recorder
}

// FindByTaxID mocks base method.
func (m *MockFindCustomerRepository) FindByTaxID(ctx context.Context, taxID string) (models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTaxID", ctx, taxID)
	ret0, _ := ret[0].(models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTaxID indicates an expected call of FindByTaxID.
func (mr *MockFindCustomerRepositoryMockRecorder) FindByTaxID(ctx, taxID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTaxID", reflect.TypeOf((*MockFindCustomerRepository)(nil).FindByTaxID), ctx, taxID)
}
