// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/domain/usecases/signup_service.go
//
// Generated by this command:
//
//	mockgen -source=./src/domain/usecases/signup_service.go -destination=./tests/mocks/mocks_signup_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/gpbPiazza/cargo-api/src/domain/models"
	usecases "github.com/gpbPiazza/cargo-api/src/domain/usecases"
	gomock "go.uber.org/mock/gomock"
)

// MockSignupService is a mock of SignupService interface.
type MockSignupService struct {
	ctrl     *gomock.Controller
	recorder *MockSignupServiceMockRecorder
}

// MockSignupServiceMockRecorder is the mock recorder for MockSignupService.
type MockSignupServiceMockRecorder struct {
	mock *MockSignupService
}

// NewMockSignupService creates a new mock instance.
func NewMockSignupService(ctrl *gomock.Controller) *MockSignupService {
	mock := &MockSignupService{ctrl: ctrl}
	mock.recorder = &MockSignupServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignupService) EXPECT() *MockSignupServiceMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockSignupService) Register(ctx context.Context, params usecases.SignupParams) (models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, params)
	ret0, _ := ret[0].(models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockSignupServiceMockRecorder) Register(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockSignupService)(nil).Register), ctx, params)
}
