// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/domain/usecases/tax_id_identifier_service.go
//
// Generated by this command:
//
//	mockgen -source=./src/domain/usecases/tax_id_identifier_service.go -destination=./tests/mocks/mocks_tax_id_identifier_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTaxIDIdentifierService is a mock of TaxIDIdentifierService interface.
type MockTaxIDIdentifierService struct {
	ctrl     *gomock.Controller
	recorder *MockTaxIDIdentifierServiceMockRecorder
}

// MockTaxIDIdentifierServiceMockRecorder is the mock recorder for MockTaxIDIdentifierService.
type MockTaxIDIdentifierServiceMockRecorder struct {
	mock *MockTaxIDIdentifierService
}

// NewMockTaxIDIdentifierService creates a new mock instance.
func NewMockTaxIDIdentifierService(ctrl *gomock.Controller) *MockTaxIDIdentifierService {
	mock := &MockTaxIDIdentifierService{ctrl: ctrl}
	mock.recorder = &MockTaxIDIdentifierServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaxIDIdentifierService) EXPECT() *MockTaxIDIdentifierServiceMockRecorder {
	return m.recorder
}

// IdentifyPersonTaxID mocks base method.
func (m *MockTaxIDIdentifierService) IdentifyPersonTaxID(taxID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdentifyPersonTaxID", taxID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IdentifyPersonTaxID indicates an expected call of IdentifyPersonTaxID.
func (mr *MockTaxIDIdentifierServiceMockRecorder) IdentifyPersonTaxID(taxID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdentifyPersonTaxID", reflect.TypeOf((*MockTaxIDIdentifierService)(nil).IdentifyPersonTaxID), taxID)
}
