// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/domain/usecases/tokenizer_service.go
//
// Generated by this command:
//
//	mockgen -source=./src/domain/usecases/tokenizer_service.go -destination=./tests/mocks/mocks_tokenizer_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenizerService is a mock of TokenizerService interface.
type MockTokenizerService struct {
	ctrl     *gomock.Controller
	recorder *MockTokenizerServiceMockRecorder
}

// MockTokenizerServiceMockRecorder is the mock recorder for MockTokenizerService.
type MockTokenizerServiceMockRecorder struct {
	mock *MockTokenizerService
}

// NewMockTokenizerService creates a new mock instance.
func NewMockTokenizerService(ctrl *gomock.Controller) *MockTokenizerService {
	mock := &MockTokenizerService{ctrl: ctrl}
	mock.recorder = &MockTokenizerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenizerService) EXPECT() *MockTokenizerServiceMockRecorder {
	return m.recorder
}

// Token mocks base method.
func (m *MockTokenizerService) Token(userID uuid.UUID, expirationAccessTime float64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token", userID, expirationAccessTime)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Token indicates an expected call of Token.
func (mr *MockTokenizerServiceMockRecorder) Token(userID, expirationAccessTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockTokenizerService)(nil).Token), userID, expirationAccessTime)
}
