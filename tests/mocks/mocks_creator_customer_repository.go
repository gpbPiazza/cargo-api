// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/domain/usecases/creator_customer_repository.go
//
// Generated by this command:
//
//	mockgen -source=./src/domain/usecases/creator_customer_repository.go -destination=./tests/mocks/mocks_creator_customer_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/gpbPiazza/cargo-api/src/domain/models"
	gomock "go.uber.org/mock/gomock"
)

// MockCreatorCustomerRepository is a mock of CreatorCustomerRepository interface.
type MockCreatorCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCreatorCustomerRepositoryMockRecorder
}

// MockCreatorCustomerRepositoryMockRecorder is the mock recorder for MockCreatorCustomerRepository.
type MockCreatorCustomerRepositoryMockRecorder struct {
	mock *MockCreatorCustomerRepository
}

// NewMockCreatorCustomerRepository creates a new mock instance.
func NewMockCreatorCustomerRepository(ctrl *gomock.Controller) *MockCreatorCustomerRepository {
	mock := &MockCreatorCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCreatorCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreatorCustomerRepository) EXPECT() *MockCreatorCustomerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCreatorCustomerRepository) Create(ctx context.Context, customer models.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCreatorCustomerRepositoryMockRecorder) Create(ctx, customer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreatorCustomerRepository)(nil).Create), ctx, customer)
}
