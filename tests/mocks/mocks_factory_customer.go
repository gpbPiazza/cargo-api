// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/domain/usecases/factory_customer.go
//
// Generated by this command:
//
//	mockgen -source=./src/domain/usecases/factory_customer.go -destination=./tests/mocks/mocks_factory_customer.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/gpbPiazza/cargo-api/src/domain/models"
	usecases "github.com/gpbPiazza/cargo-api/src/domain/usecases"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomerFactory is a mock of CustomerFactory interface.
type MockCustomerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerFactoryMockRecorder
}

// MockCustomerFactoryMockRecorder is the mock recorder for MockCustomerFactory.
type MockCustomerFactoryMockRecorder struct {
	mock *MockCustomerFactory
}

// NewMockCustomerFactory creates a new mock instance.
func NewMockCustomerFactory(ctrl *gomock.Controller) *MockCustomerFactory {
	mock := &MockCustomerFactory{ctrl: ctrl}
	mock.recorder = &MockCustomerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerFactory) EXPECT() *MockCustomerFactoryMockRecorder {
	return m.recorder
}

// Make mocks base method.
func (m *MockCustomerFactory) Make(params usecases.SignupParams, password string) models.Customer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Make", params, password)
	ret0, _ := ret[0].(models.Customer)
	return ret0
}

// Make indicates an expected call of Make.
func (mr *MockCustomerFactoryMockRecorder) Make(params, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Make", reflect.TypeOf((*MockCustomerFactory)(nil).Make), params, password)
}
