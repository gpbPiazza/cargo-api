// Code generated by MockGen. DO NOT EDIT.
// Source: .//src/domain/usecases/authenticator_service.go
//
// Generated by this command:
//
//	mockgen -source=.//src/domain/usecases/authenticator_service.go -destination=./tests/mocks/mocks_authenticator_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/gpbPiazza/cargo-api/src/domain/models"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthenticatorService is a mock of AuthenticatorService interface.
type MockAuthenticatorService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorServiceMockRecorder
}

// MockAuthenticatorServiceMockRecorder is the mock recorder for MockAuthenticatorService.
type MockAuthenticatorServiceMockRecorder struct {
	mock *MockAuthenticatorService
}

// NewMockAuthenticatorService creates a new mock instance.
func NewMockAuthenticatorService(ctrl *gomock.Controller) *MockAuthenticatorService {
	mock := &MockAuthenticatorService{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticatorService) EXPECT() *MockAuthenticatorServiceMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthenticatorService) Authenticate(ctx context.Context, customer models.Customer, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, customer, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticatorServiceMockRecorder) Authenticate(ctx, customer, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticatorService)(nil).Authenticate), ctx, customer, password)
}
